{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useContext, useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FooterMenu from \"../components/Menu\";\nimport Axios from 'axios';\nimport { AuthContext } from \"../context/authorization\";\nimport { useFocusEffect } from '@react-navigation/native';\nimport { SocketContext } from \"../context/SocketContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatListScreen = function ChatListScreen(_ref) {\n  var _state$user;\n  var navigation = _ref.navigation;\n  var _useContext = useContext(AuthContext),\n    _useContext2 = _slicedToArray(_useContext, 1),\n    state = _useContext2[0];\n  var socket = useContext(SocketContext);\n  var userId = state == null ? void 0 : (_state$user = state.user) == null ? void 0 : _state$user._id;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    chatList = _useState2[0],\n    setChatList = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    hasFriends = _useState4[0],\n    setHasFriends = _useState4[1];\n  useFocusEffect(React.useCallback(function () {\n    var fetchData = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield Axios.get(`/auth/allfriends/${userId}`);\n          var friends = response.data;\n          var chatListWithLastMessage = yield Promise.all(friends.map(function () {\n            var _ref3 = _asyncToGenerator(function* (friend) {\n              var lastMessageResponse = yield Axios.get(`/auth/lastmessage/${userId}/${friend._id}`);\n              var _lastMessageResponse$ = lastMessageResponse.data[0],\n                lastMessage = _lastMessageResponse$.lastMessage,\n                time = _lastMessageResponse$.time;\n              return _objectSpread(_objectSpread({}, friend), {}, {\n                lastMessage: lastMessage,\n                time: time\n              });\n            });\n            return function (_x) {\n              return _ref3.apply(this, arguments);\n            };\n          }()));\n          setChatList(chatListWithLastMessage);\n          setHasFriends(chatListWithLastMessage.length > 0);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      });\n      return function fetchData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, [userId]));\n  useEffect(function () {\n    socket.on('new-chat', function (_ref4) {\n      var text = _ref4.text,\n        roomId = _ref4.roomId,\n        time = _ref4.time;\n      console.log(text);\n      setChatList(function (prevChatList) {\n        return prevChatList.map(function (chatItem) {\n          if (chatItem._id === roomId) {\n            return _objectSpread(_objectSpread({}, chatItem), {}, {\n              lastMessage: text,\n              time: time\n            });\n          }\n          return chatItem;\n        });\n      });\n    });\n    return function () {\n      socket.off('chat');\n    };\n  }, [socket]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [hasFriends ? _jsx(FlatList, {\n      showsVerticalScrollIndicator: false,\n      data: chatList,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: function renderItem(_ref5) {\n        var item = _ref5.item;\n        return _jsxs(TouchableOpacity, {\n          style: styles.chatItem,\n          onPress: function onPress() {\n            return navigation.navigate('Chat', {\n              userId: item._id,\n              name: item.name,\n              avatar: item.avatar\n            });\n          },\n          children: [_jsx(Image, {\n            source: {\n              uri: item.avatar\n            },\n            style: styles.profileImage\n          }), _jsxs(View, {\n            style: styles.chatDetails,\n            children: [_jsx(Text, {\n              style: styles.name,\n              children: item.name\n            }), _jsx(Text, {\n              style: styles.lastMessage,\n              children: item.lastMessage ? item.lastMessage.length > 20 ? `${item.lastMessage.slice(0, 15)}...` : item.lastMessage : 'No messages'\n            })]\n          }), _jsx(View, {\n            style: styles.messageInfo,\n            children: _jsx(View, {\n              style: styles.unreadBadge,\n              children: _jsxs(Text, {\n                style: styles.unreadCount,\n                children: [item.time || 2, \" \"]\n              })\n            })\n          })]\n        });\n      }\n    }) : _jsxs(View, {\n      style: styles.noFriendsContainer,\n      children: [_jsx(Text, {\n        style: styles.noFriendsText,\n        children: \"You don't have any friends.\"\n      }), _jsx(Button, {\n        title: \"Make Friends\",\n        onPress: function onPress() {\n          return navigation.navigate('AllUsers');\n        }\n      })]\n    }), _jsx(FooterMenu, {})]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 16\n  },\n  chatItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16\n  },\n  profileImage: {\n    width: 60,\n    height: 60,\n    borderRadius: 30\n  },\n  chatDetails: {\n    flex: 1,\n    marginLeft: 12\n  },\n  name: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  lastMessage: {\n    fontSize: 16,\n    color: 'gray'\n  },\n  messageInfo: {\n    alignItems: 'flex-end'\n  },\n  time: {\n    fontSize: 14,\n    color: 'gray'\n  },\n  unreadBadge: {\n    backgroundColor: '#007BFF',\n    borderRadius: 12,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    marginTop: 4\n  },\n  unreadCount: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold'\n  },\n  noFriendsContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  noFriendsText: {\n    fontSize: 18,\n    marginBottom: 16\n  }\n});\nexport default ChatListScreen;","map":{"version":3,"names":["React","useContext","useEffect","useState","View","Text","FlatList","StyleSheet","Image","TouchableOpacity","Button","FooterMenu","Axios","AuthContext","useFocusEffect","SocketContext","jsx","_jsx","jsxs","_jsxs","ChatListScreen","_ref","_state$user","navigation","_useContext","_useContext2","_slicedToArray","state","socket","userId","user","_id","_useState","_useState2","chatList","setChatList","_useState3","_useState4","hasFriends","setHasFriends","useCallback","fetchData","_ref2","_asyncToGenerator","response","get","friends","data","chatListWithLastMessage","Promise","all","map","_ref3","friend","lastMessageResponse","_lastMessageResponse$","lastMessage","time","_objectSpread","_x","apply","arguments","length","error","console","on","_ref4","text","roomId","log","prevChatList","chatItem","off","style","styles","container","children","showsVerticalScrollIndicator","keyExtractor","item","renderItem","_ref5","onPress","navigate","name","avatar","source","uri","profileImage","chatDetails","slice","messageInfo","unreadBadge","unreadCount","noFriendsContainer","noFriendsText","title","create","flex","backgroundColor","padding","flexDirection","alignItems","marginBottom","width","height","borderRadius","marginLeft","fontSize","fontWeight","color","paddingHorizontal","paddingVertical","marginTop","justifyContent"],"sources":["D:/React-Native/chat/client/screens/ChatList.js"],"sourcesContent":["\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, StyleSheet, Image, TouchableOpacity, Button } from 'react-native';\r\nimport FooterMenu from '../components/Menu';\r\nimport Axios from 'axios';\r\nimport { AuthContext } from '../context/authorization';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport { SocketContext } from '../context/SocketContext';\r\n\r\nconst ChatListScreen = ({ navigation }) => {\r\n  const [state] = useContext(AuthContext);\r\n  const socket = useContext(SocketContext);\r\n  const userId = state?.user?._id;\r\n\r\n  const [chatList, setChatList] = useState([]);\r\n  const [hasFriends, setHasFriends] = useState(true);\r\n\r\n  useFocusEffect(\r\n    React.useCallback(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const response = await Axios.get(`/auth/allfriends/${userId}`);\r\n          const friends = response.data;\r\n\r\n          // Fetch the last message for each friend\r\n          const chatListWithLastMessage = await Promise.all(\r\n            friends.map(async (friend) => {\r\n              const lastMessageResponse = await Axios.get(`/auth/lastmessage/${userId}/${friend._id}`);\r\n              const { lastMessage, time } = lastMessageResponse.data[0];\r\n\r\n              return {\r\n                ...friend,\r\n                lastMessage,\r\n                time,\r\n              };\r\n            })\r\n          );\r\n\r\n          setChatList(chatListWithLastMessage);\r\n          // console.log(chatListWithLastMessage);\r\n\r\n          setHasFriends(chatListWithLastMessage.length > 0);\r\n        } catch (error) {\r\n          console.error('Error fetching data:', error);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }, [userId])\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    socket.on('new-chat', ( {text,roomId,time} ) => {\r\n      console.log(text);\r\n\r\n      // Update the last message in the chat list\r\n      setChatList((prevChatList) =>\r\n        prevChatList.map((chatItem) => {\r\n          if (chatItem._id === roomId) {\r\n            return {\r\n              ...chatItem,\r\n              lastMessage: text,\r\n              time,\r\n            };\r\n          }\r\n          return chatItem;\r\n        })\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      socket.off('chat');\r\n    };\r\n  }, [socket]);\r\n\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {hasFriends ? (\r\n        <FlatList\r\n          showsVerticalScrollIndicator={false}\r\n          data={chatList}\r\n          keyExtractor={(item) => item._id}\r\n          renderItem={({ item }) => (\r\n            <TouchableOpacity\r\n              style={styles.chatItem}\r\n              onPress={() => navigation.navigate('Chat', { userId: item._id, name: item.name, avatar: item.avatar })}\r\n            >\r\n              <Image source={{ uri: item.avatar }} style={styles.profileImage} />\r\n              <View style={styles.chatDetails}>\r\n                <Text style={styles.name}>{item.name}</Text>\r\n                <Text style={styles.lastMessage}>\r\n                  {item.lastMessage\r\n                    ? item.lastMessage.length > 20\r\n                      ? `${item.lastMessage.slice(0, 15)}...`\r\n                      : item.lastMessage\r\n                    : 'No messages'}\r\n                </Text>\r\n              </View>\r\n              <View style={styles.messageInfo}>\r\n\r\n                <View style={styles.unreadBadge}>\r\n                  <Text style={styles.unreadCount}>{item.time || 2} </Text>\r\n                </View>\r\n              </View>\r\n            </TouchableOpacity>\r\n          )}\r\n        />\r\n      ) : (\r\n        <View style={styles.noFriendsContainer}>\r\n          <Text style={styles.noFriendsText}>You don't have any friends.</Text>\r\n          <Button title=\"Make Friends\" onPress={() => navigation.navigate('AllUsers')} />\r\n        </View>\r\n      )}\r\n      <FooterMenu />\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    padding: 16,\r\n  },\r\n  chatItem: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 16,\r\n  },\r\n  profileImage: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 30,\r\n  },\r\n  chatDetails: {\r\n    flex: 1,\r\n    marginLeft: 12,\r\n  },\r\n  name: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n  lastMessage: {\r\n    fontSize: 16,\r\n    color: 'gray',\r\n  },\r\n  messageInfo: {\r\n    alignItems: 'flex-end',\r\n  },\r\n  time: {\r\n    fontSize: 14,\r\n    color: 'gray',\r\n  },\r\n  unreadBadge: {\r\n    backgroundColor: '#007BFF',\r\n    borderRadius: 12,\r\n    paddingHorizontal: 6,\r\n    paddingVertical: 2,\r\n    marginTop: 4,\r\n  },\r\n  unreadCount: {\r\n    color: 'white',\r\n    fontSize: 12,\r\n    fontWeight: 'bold',\r\n  },\r\n  noFriendsContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  noFriendsText: {\r\n    fontSize: 18,\r\n    marginBottom: 16,\r\n  },\r\n});\r\n\r\nexport default ChatListScreen;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}